{"ast":null,"code":"var _jsxFileName = \"/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Game from \"./Components/Game\";\nimport Header from \"./Components/Header\";\nimport \"./styles/styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [gameType, setGameType] = useState(1); // Default game type is Singers (1)\n\n  useEffect(() => {\n    const storedWallet = localStorage.getItem(\"connectedAccount\");\n    if (storedWallet) {\n      setWalletAddress(storedWallet);\n      console.log(\"Restored wallet address from localStorage:\", storedWallet);\n    }\n  }, []);\n  const handleLogout = () => {\n    setWalletAddress(null);\n    localStorage.removeItem(\"connectedAccount\");\n    console.log(\"User disconnected.\");\n  };\n  const connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n    if (isMetaMaskInstalled) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const connectedAddress = accounts[0];\n        setWalletAddress(connectedAddress);\n        localStorage.setItem(\"connectedAccount\", connectedAddress);\n        alert(`Connected to account: ${connectedAddress}`);\n      } catch (err) {\n        console.error(\"MetaMask connection failed:\", err);\n      }\n    } else {\n      const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\";\n      const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n      alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n      window.location.href = metamaskDeepLink;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      walletAddress: walletAddress,\n      onConnect: connectMetaMask,\n      onDisconnect: handleLogout,\n      onGameTypeChange: setGameType // Pass setGameType to Header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Game, {\n      gameType: gameType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fmWD/rAXE9pCF421xQn3xI2MAY4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Game","Header","jsxDEV","_jsxDEV","App","_s","walletAddress","setWalletAddress","gameType","setGameType","storedWallet","localStorage","getItem","console","log","handleLogout","removeItem","connectMetaMask","isMetaMaskInstalled","window","ethereum","accounts","request","method","connectedAddress","setItem","alert","err","error","dAppUrl","metamaskDeepLink","location","href","className","children","onConnect","onDisconnect","onGameTypeChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Game from \"./Components/Game\";\nimport Header from \"./Components/Header\";\nimport \"./styles/styles.css\";\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [gameType, setGameType] = useState(1); // Default game type is Singers (1)\n\n  useEffect(() => {\n    const storedWallet = localStorage.getItem(\"connectedAccount\");\n    if (storedWallet) {\n      setWalletAddress(storedWallet);\n      console.log(\"Restored wallet address from localStorage:\", storedWallet);\n    }\n  }, []);\n\n  const handleLogout = () => {\n    setWalletAddress(null);\n    localStorage.removeItem(\"connectedAccount\");\n    console.log(\"User disconnected.\");\n  };\n\n  const connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n\n    if (isMetaMaskInstalled) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const connectedAddress = accounts[0];\n\n        setWalletAddress(connectedAddress);\n        localStorage.setItem(\"connectedAccount\", connectedAddress);\n\n        alert(`Connected to account: ${connectedAddress}`);\n      } catch (err) {\n        console.error(\"MetaMask connection failed:\", err);\n      }\n    } else {\n      const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\";\n      const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n\n      alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n      window.location.href = metamaskDeepLink;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header\n        walletAddress={walletAddress}\n        onConnect={connectMetaMask}\n        onDisconnect={handleLogout}\n        onGameTypeChange={setGameType} // Pass setGameType to Header\n      />\n      <Game gameType={gameType} /> {/* Pass gameType to Game */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE7CC,SAAS,CAAC,MAAM;IACd,MAAMW,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC7D,IAAIF,YAAY,EAAE;MAChBH,gBAAgB,CAACG,YAAY,CAAC;MAC9BG,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEJ,YAAY,CAAC;IACzE;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACzBR,gBAAgB,CAAC,IAAI,CAAC;IACtBI,YAAY,CAACK,UAAU,CAAC,kBAAkB,CAAC;IAC3CH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACnC,CAAC;EAED,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,mBAAmB,GAAG,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW;IAElE,IAAIF,mBAAmB,EAAE;MACvB,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAC7CC,MAAM,EAAE;QACV,CAAC,CAAC;QACF,MAAMC,gBAAgB,GAAGH,QAAQ,CAAC,CAAC,CAAC;QAEpCd,gBAAgB,CAACiB,gBAAgB,CAAC;QAClCb,YAAY,CAACc,OAAO,CAAC,kBAAkB,EAAED,gBAAgB,CAAC;QAE1DE,KAAK,CAAC,yBAAyBF,gBAAgB,EAAE,CAAC;MACpD,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZd,OAAO,CAACe,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC;MACnD;IACF,CAAC,MAAM;MACL,MAAME,OAAO,GAAG,oCAAoC;MACpD,MAAMC,gBAAgB,GAAG,kCAAkCD,OAAO,EAAE;MAEpEH,KAAK,CAAC,qEAAqE,CAAC;MAC5EP,MAAM,CAACY,QAAQ,CAACC,IAAI,GAAGF,gBAAgB;IACzC;EACF,CAAC;EAED,oBACE3B,OAAA;IAAK8B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB/B,OAAA,CAACF,MAAM;MACLK,aAAa,EAAEA,aAAc;MAC7B6B,SAAS,EAAElB,eAAgB;MAC3BmB,YAAY,EAAErB,YAAa;MAC3BsB,gBAAgB,EAAE5B,WAAY,CAAC;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFtC,OAAA,CAACH,IAAI;MAACQ,QAAQ,EAAEA;IAAS;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEV,CAAC;AAACpC,EAAA,CAvDID,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAyDT,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}