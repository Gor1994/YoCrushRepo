{"ast":null,"code":"var _jsxFileName = \"/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport ABI from \"../abi.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NFTCards = () => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [provider, setProvider] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [leaderboard, setLeaderboard] = useState([]);\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n  // Initialize Web3Modal\n  const web3Modal = useRef(new Web3Modal({\n    cacheProvider: true,\n    // Enables auto-reconnect\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        // Required for WalletConnect\n        options: {\n          rpc: {\n            1: customRpcUrl // Replace with your custom RPC\n          }\n        }\n      }\n    }\n  }));\n\n  // Flag to prevent multiple calls to startNewGame\n  const hasInitialized = useRef(false);\n  const connectWallet = async () => {\n    try {\n      const instance = await web3Modal.current.connect(); // Opens the modal\n      const ethersProvider = new ethers.BrowserProvider(instance);\n      const signer = await ethersProvider.getSigner();\n      const address = await signer.getAddress();\n      setProvider(ethersProvider);\n      setWalletAddress(address);\n      setError(\"\");\n      console.log(\"Connected wallet address:\", address);\n    } catch (err) {\n      console.error(\"Error connecting wallet:\", err);\n      setError(\"Failed to connect wallet. Please try again.\");\n    }\n  };\n  const disconnectWallet = async () => {\n    web3Modal.current.clearCachedProvider();\n    setProvider(null);\n    setWalletAddress(\"\");\n  };\n  const startNewGame = async () => {\n    if (loading || hasInitialized.current) return; // Prevent duplicate calls\n    console.log(\"startNewGame called\");\n    hasInitialized.current = true; // Set the flag to prevent future calls\n    setLoading(true);\n    setGameStarted(true);\n    try {\n      const response = await axios.get(backendUrl);\n      const parsedNFTs = response.data.nfts.map(nft => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata)\n      }));\n      setNfts(parsedNFTs);\n\n      // Fetch the leaderboard after fetching NFTs\n      await fetchLeaderboard(parsedNFTs);\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map(i => i + 1));\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchLeaderboard = async () => {\n    try {\n      const ethersProvider = provider || new ethers.JsonRpcProvider(customRpcUrl);\n      const contract = new ethers.Contract(contractAddress, ABI, ethersProvider);\n      const rawData = await contract.getLeaderboard(1);\n      const leaderboardData = rawData.map(entry => ({\n        rank: Number(entry[0]),\n        score: Number(entry[1])\n      })).filter(entry => entry.rank !== 0);\n      const leaderboardWithNames = await Promise.all(leaderboardData.map(async entry => {\n        try {\n          const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n          const nftName = response.data.name;\n          return {\n            ...entry,\n            name: nftName\n          };\n        } catch (error) {\n          console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n          return {\n            ...entry,\n            name: \"Unknown\"\n          };\n        }\n      }));\n      setLeaderboard(leaderboardWithNames);\n    } catch (err) {\n      console.error(\"Error fetching leaderboard:\", err);\n    }\n  };\n  useEffect(() => {\n    if (web3Modal.current.cachedProvider) {\n      connectWallet(); // Automatically connect if a provider is cached\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-cards-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-connection\",\n      children: [walletAddress ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Connected: \", walletAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          className: \"disconnect-wallet-button\",\n          children: \"Disconnect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        className: \"connect-wallet-button\",\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-wrapper\",\n        children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: nft.metadata.name || `NFT ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.metadata.image,\n            alt: nft.metadata.name || \"NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewGame,\n        className: \"start-game-button\",\n        children: \"Start New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Leaderboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"leaderboard-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: leaderboard.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.rank\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTCards, \"gjhVaaqoSWyviil8RKvO6SbnGKE=\");\n_c = NFTCards;\nexport default NFTCards;\nvar _c;\n$RefreshReg$(_c, \"NFTCards\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ethers","Web3Modal","WalletConnectProvider","ABI","jsxDEV","_jsxDEV","Fragment","_Fragment","NFTCards","_s","nfts","setNfts","loading","setLoading","gameStarted","setGameStarted","rankings","setRankings","availableRanks","setAvailableRanks","walletAddress","setWalletAddress","provider","setProvider","error","setError","leaderboard","setLeaderboard","backendUrl","contractAddress","customRpcUrl","web3Modal","cacheProvider","providerOptions","walletconnect","package","options","rpc","hasInitialized","connectWallet","instance","current","connect","ethersProvider","BrowserProvider","signer","getSigner","address","getAddress","console","log","err","disconnectWallet","clearCachedProvider","startNewGame","response","get","parsedNFTs","data","map","nft","id","metadata","JSON","parse","fetchLeaderboard","Array","length","keys","i","JsonRpcProvider","contract","Contract","rawData","getLeaderboard","leaderboardData","entry","rank","Number","score","filter","leaderboardWithNames","Promise","all","nftName","name","cachedProvider","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","src","image","alt","_c","$RefreshReg$"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport ABI from \"../abi.json\";\n\nconst NFTCards = () => {\n    const [nfts, setNfts] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [gameStarted, setGameStarted] = useState(false);\n    const [rankings, setRankings] = useState({});\n    const [availableRanks, setAvailableRanks] = useState([]);\n    const [walletAddress, setWalletAddress] = useState(\"\");\n    const [provider, setProvider] = useState(null);\n    const [error, setError] = useState(\"\");\n    const [leaderboard, setLeaderboard] = useState([]);\n\n    const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n    const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n    const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n    // Initialize Web3Modal\n    const web3Modal = useRef(\n        new Web3Modal({\n            cacheProvider: true, // Enables auto-reconnect\n            providerOptions: {\n                walletconnect: {\n                    package: WalletConnectProvider, // Required for WalletConnect\n                    options: {\n                        rpc: {\n                            1: customRpcUrl, // Replace with your custom RPC\n                        },\n                    },\n                },\n            },\n        })\n    );\n\n    // Flag to prevent multiple calls to startNewGame\n    const hasInitialized = useRef(false);\n\n    const connectWallet = async () => {\n        try {\n            const instance = await web3Modal.current.connect(); // Opens the modal\n            const ethersProvider = new ethers.BrowserProvider(instance);\n            const signer = await ethersProvider.getSigner();\n            const address = await signer.getAddress();\n\n            setProvider(ethersProvider);\n            setWalletAddress(address);\n            setError(\"\");\n            console.log(\"Connected wallet address:\", address);\n        } catch (err) {\n            console.error(\"Error connecting wallet:\", err);\n            setError(\"Failed to connect wallet. Please try again.\");\n        }\n    };\n\n    const disconnectWallet = async () => {\n        web3Modal.current.clearCachedProvider();\n        setProvider(null);\n        setWalletAddress(\"\");\n    };\n\n    const startNewGame = async () => {\n        if (loading || hasInitialized.current) return; // Prevent duplicate calls\n        console.log(\"startNewGame called\");\n        hasInitialized.current = true; // Set the flag to prevent future calls\n        setLoading(true);\n        setGameStarted(true);\n\n        try {\n            const response = await axios.get(backendUrl);\n            const parsedNFTs = response.data.nfts.map((nft) => ({\n                id: nft.id,\n                metadata: JSON.parse(nft.metadata),\n            }));\n            setNfts(parsedNFTs);\n\n            // Fetch the leaderboard after fetching NFTs\n            await fetchLeaderboard(parsedNFTs);\n\n            setRankings({});\n            setAvailableRanks([...Array(parsedNFTs.length).keys()].map((i) => i + 1));\n        } catch (error) {\n            console.error(\"Error fetching NFTs:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchLeaderboard = async () => {\n        try {\n            const ethersProvider = provider || new ethers.JsonRpcProvider(customRpcUrl);\n            const contract = new ethers.Contract(contractAddress, ABI, ethersProvider);\n\n            const rawData = await contract.getLeaderboard(1);\n            const leaderboardData = rawData\n                .map((entry) => ({\n                    rank: Number(entry[0]),\n                    score: Number(entry[1]),\n                }))\n                .filter((entry) => entry.rank !== 0);\n\n            const leaderboardWithNames = await Promise.all(\n                leaderboardData.map(async (entry) => {\n                    try {\n                        const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n                        const nftName = response.data.name;\n                        return { ...entry, name: nftName };\n                    } catch (error) {\n                        console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n                        return { ...entry, name: \"Unknown\" };\n                    }\n                })\n            );\n\n            setLeaderboard(leaderboardWithNames);\n        } catch (err) {\n            console.error(\"Error fetching leaderboard:\", err);\n        }\n    };\n\n    useEffect(() => {\n        if (web3Modal.current.cachedProvider) {\n            connectWallet(); // Automatically connect if a provider is cached\n        }\n    }, []);\n\n    return (\n        <div className=\"nft-cards-container\">\n            <div className=\"wallet-connection\">\n                {walletAddress ? (\n                    <>\n                        <p>Connected: {walletAddress}</p>\n                        <button onClick={disconnectWallet} className=\"disconnect-wallet-button\">\n                            Disconnect Wallet\n                        </button>\n                    </>\n                ) : (\n                    <button onClick={connectWallet} className=\"connect-wallet-button\">\n                        Connect Wallet\n                    </button>\n                )}\n                {error && <p className=\"error-message\">{error}</p>}\n            </div>\n            {loading ? (\n                <p>Loading...</p>\n            ) : (\n                <>\n                    <div className=\"cards-wrapper\">\n                        {nfts.map((nft, index) => (\n                            <div key={index} className=\"nft-card\">\n                                <h3>{nft.metadata.name || `NFT ${index + 1}`}</h3>\n                                <img src={nft.metadata.image} alt={nft.metadata.name || \"NFT\"} />\n                            </div>\n                        ))}\n                    </div>\n                    <button onClick={startNewGame} className=\"start-game-button\">\n                        Start New Game\n                    </button>\n                </>\n            )}\n            <div className=\"leaderboard-container\">\n                <h2>Leaderboard</h2>\n                <table className=\"leaderboard-table\">\n                    <thead>\n                        <tr>\n                            <th>Id</th>\n                            <th>Name</th>\n                            <th>Score</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {leaderboard.map((entry, index) => (\n                            <tr key={index}>\n                                <td>{entry.rank}</td>\n                                <td>{entry.name}</td>\n                                <td>{entry.score}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default NFTCards;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}