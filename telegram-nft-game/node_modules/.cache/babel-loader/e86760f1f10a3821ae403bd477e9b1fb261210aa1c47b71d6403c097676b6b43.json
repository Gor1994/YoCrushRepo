{"ast":null,"code":"var _jsxFileName = \"/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\"; // Import the WalletModal component\nimport ABI from \"../abi.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NFTCards = () => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [connectedAccount, setConnectedAccount] = useState(null);\n\n  // Handle redirect and fetch the account from the URL query parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const account = urlParams.get(\"account\");\n    if (account) {\n      console.log(\"User is connected with account:\", account);\n      setConnectedAccount(account);\n\n      // Store the account in localStorage to persist after reloads\n      localStorage.setItem(\"connectedAccount\", account);\n\n      // Optionally remove query parameters from the URL after storing\n      const newUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState({}, document.title, newUrl);\n    } else {\n      // Retrieve from localStorage if available\n      const storedAccount = localStorage.getItem(\"connectedAccount\");\n      if (storedAccount) {\n        setConnectedAccount(storedAccount);\n        console.log(\"User is connected with stored account:\", storedAccount);\n      }\n    }\n  }, []);\n\n  // Handle logout by clearing the state and localStorage\n  const handleLogout = () => {\n    setConnectedAccount(null);\n    localStorage.removeItem(\"connectedAccount\");\n    console.log(\"User disconnected.\");\n  };\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n  const provider = new ethers.JsonRpcProvider(customRpcUrl);\n  const hasInitialized = useRef(false);\n  const startNewGame = async () => {\n    if (loading || hasInitialized.current) return;\n    console.log(\"startNewGame called\");\n    hasInitialized.current = true;\n    setLoading(true);\n    setGameStarted(true);\n    try {\n      const response = await axios.get(backendUrl);\n      console.log(\"ðŸš€ ~ startNewGame ~ response:\", response);\n      const parsedNFTs = response.data.nfts.map(nft => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata)\n      }));\n      setNfts(parsedNFTs);\n      await fetchLeaderboard(parsedNFTs);\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map(i => i + 1));\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchLeaderboard = async () => {\n    try {\n      const contract = new ethers.Contract(contractAddress, ABI, provider);\n      const rawData = await contract.getLeaderboard(1);\n      const leaderboardData = rawData.map(entry => ({\n        rank: Number(entry[0]),\n        score: Number(entry[1])\n      })).filter(entry => entry.rank !== 0);\n      const leaderboardWithNames = await Promise.all(leaderboardData.map(async entry => {\n        try {\n          const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n          const nftName = response.data.name;\n          return {\n            ...entry,\n            name: nftName\n          };\n        } catch (error) {\n          console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n          return {\n            ...entry,\n            name: \"Unknown\"\n          };\n        }\n      }));\n      setLeaderboard(leaderboardWithNames);\n    } catch (err) {\n      console.error(\"Error fetching leaderboard:\", err);\n    }\n  };\n  const handleSubmitRanks = async () => {\n    // Ensure wallet is connected\n    if (!connectedAccount) {\n      setError(\"Please connect your wallet first.\");\n      return;\n    }\n\n    // Validate that all NFTs are ranked\n    if (Object.keys(rankings).length !== nfts.length) {\n      setError(\"Please assign ranks to all NFTs.\");\n      return;\n    }\n\n    // Prepare the rankings in the correct format\n    const ids = Object.entries(rankings).sort(([, rankA], [, rankB]) => rankA - rankB) // Sort by rank\n    .map(([index]) => {\n      const nft = nfts[Number(index)];\n      if (!nft || !nft.id) {\n        throw new Error(`Missing or undefined ID for NFT at index ${index}`);\n      }\n      return nft.id; // Collect NFT IDs\n    });\n    try {\n      setLoading(true);\n      setError(\"\");\n\n      // Connect to MetaMask and get the signer\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      // Instantiate the contract\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n\n      // Send the transaction\n      console.log(\"Submitting rankings:\", ids);\n      const tx = await contract.submit(ids); // Assuming `submit` is the contract method\n      await tx.wait(); // Wait for the transaction to be mined\n\n      alert(\"Rankings submitted successfully!\");\n    } catch (err) {\n      console.error(\"Error submitting rankings:\", err);\n      setError(\"Failed to submit rankings. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n    if (isMetaMaskInstalled) {\n      try {\n        // Attempt to connect MetaMask directly\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(\"Connected account:\", accounts[0]);\n\n        // Store connected account in localStorage for persistence\n        localStorage.setItem(\"connectedAccount\", accounts[0]);\n\n        // Handle successful connection\n        alert(`Connected to account: ${accounts[0]}`);\n      } catch (err) {\n        console.error(\"MetaMask connection failed:\", err);\n      }\n    } else {\n      // Redirect to MetaMask app with your dApp deep link\n      const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\"; // Your dApp base domain (no protocol)\n      const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n      alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n      window.location.href = metamaskDeepLink;\n\n      // Poll for connection when redirected back to the app\n      const interval = setInterval(async () => {\n        if (typeof window.ethereum !== \"undefined\") {\n          try {\n            const accounts = await window.ethereum.request({\n              method: \"eth_accounts\"\n            });\n            if (accounts && accounts.length > 0) {\n              console.log(\"Connected account after return:\", accounts[0]);\n\n              // Store the connected account and clear interval\n              localStorage.setItem(\"connectedAccount\", accounts[0]);\n              clearInterval(interval);\n\n              // Handle connected account\n              alert(`Connected to account: ${accounts[0]}`);\n            }\n          } catch (err) {\n            console.error(\"Error checking MetaMask accounts:\", err);\n          }\n        } else {\n          console.warn(\"Waiting for MetaMask to be installed.\");\n        }\n      }, 2000);\n    }\n  };\n  const connectWalletConnect = async () => {\n    const walletConnectProvider = new WalletConnectProvider({\n      rpc: {\n        1: customRpcUrl\n      }\n    });\n    try {\n      await walletConnectProvider.enable();\n      const web3Provider = new ethers.BrowserProvider(walletConnectProvider);\n      const signer = await web3Provider.getSigner();\n      const address = await signer.getAddress();\n      setWalletAddress(address);\n      setError(\"\");\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error(\"Error connecting WalletConnect:\", err);\n      setError(\"Failed to connect WalletConnect. Please try again.\");\n    }\n  };\n  const handleAssignRank = (index, rank) => {\n    setRankings(prev => ({\n      ...prev,\n      [index]: rank\n    }));\n    setAvailableRanks(prev => prev.filter(r => r !== rank));\n  };\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWalletAddress(accounts[0]);\n        } else {\n          setWalletAddress(\"\");\n          setError(\"Wallet disconnected.\");\n        }\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n  }, []);\n  useEffect(() => {\n    startNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-cards-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallet-connection\",\n        children: [walletAddress ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Connected: \", walletAddress]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLogout,\n            className: \"logout-button\",\n            children: \"Log Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsModalOpen(true),\n          className: \"connect-wallet-button\",\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 29\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(WalletModal, {\n        isOpen: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        onConnectMetaMask: connectMetaMask,\n        onConnectWalletConnect: connectWalletConnect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-wrapper\",\n        children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`,\n          style: {\n            opacity: rankings[index] ? 0.5 : 1,\n            pointerEvents: rankings[index] ? \"none\" : \"auto\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: nft.metadata.name || `NFT ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.metadata.image,\n            alt: nft.metadata.name || \"NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rank-buttons\",\n            children: !rankings[index] && availableRanks.map(rank => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAssignRank(index, rank),\n              disabled: rankings[index] === rank || !!Object.values(rankings).find(r => r === rank),\n              children: `Rank ${rank}`\n            }, rank, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 33\n          }, this), rankings[index] && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Assigned Rank: \", rankings[index]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 53\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitRanks,\n        className: \"submit-ranks-button\",\n        children: \"Submit Rankings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"leaderboard-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: leaderboard.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.score\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTCards, \"kj00XOFel02Eue80DeNuwUDuWkw=\");\n_c = NFTCards;\nexport default NFTCards;\nvar _c;\n$RefreshReg$(_c, \"NFTCards\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ethers","WalletConnectProvider","WalletModal","ABI","jsxDEV","_jsxDEV","Fragment","_Fragment","NFTCards","_s","nfts","setNfts","loading","setLoading","gameStarted","setGameStarted","rankings","setRankings","availableRanks","setAvailableRanks","walletAddress","setWalletAddress","error","setError","leaderboard","setLeaderboard","isModalOpen","setIsModalOpen","connectedAccount","setConnectedAccount","urlParams","URLSearchParams","window","location","search","account","get","console","log","localStorage","setItem","newUrl","origin","pathname","history","replaceState","document","title","storedAccount","getItem","handleLogout","removeItem","backendUrl","contractAddress","customRpcUrl","provider","JsonRpcProvider","hasInitialized","startNewGame","current","response","parsedNFTs","data","map","nft","id","metadata","JSON","parse","fetchLeaderboard","Array","length","keys","i","contract","Contract","rawData","getLeaderboard","leaderboardData","entry","rank","Number","score","filter","leaderboardWithNames","Promise","all","nftName","name","err","handleSubmitRanks","Object","ids","entries","sort","rankA","rankB","index","Error","BrowserProvider","ethereum","signer","getSigner","tx","submit","wait","alert","connectMetaMask","isMetaMaskInstalled","accounts","request","method","dAppUrl","metamaskDeepLink","href","interval","setInterval","clearInterval","warn","connectWalletConnect","walletConnectProvider","rpc","enable","web3Provider","address","getAddress","handleAssignRank","prev","r","on","reload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onClose","onConnectMetaMask","onConnectWalletConnect","style","opacity","pointerEvents","src","image","alt","disabled","values","find","_c","$RefreshReg$"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\"; // Import the WalletModal component\nimport ABI from \"../abi.json\";\n\nconst NFTCards = () => {\n    const [nfts, setNfts] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [gameStarted, setGameStarted] = useState(false);\n    const [rankings, setRankings] = useState({});\n    const [availableRanks, setAvailableRanks] = useState([]);\n    const [walletAddress, setWalletAddress] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [leaderboard, setLeaderboard] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [connectedAccount, setConnectedAccount] = useState(null);\n\n    // Handle redirect and fetch the account from the URL query parameters\n    useEffect(() => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const account = urlParams.get(\"account\");\n  \n      if (account) {\n        console.log(\"User is connected with account:\", account);\n        setConnectedAccount(account);\n  \n        // Store the account in localStorage to persist after reloads\n        localStorage.setItem(\"connectedAccount\", account);\n  \n        // Optionally remove query parameters from the URL after storing\n        const newUrl = window.location.origin + window.location.pathname;\n        window.history.replaceState({}, document.title, newUrl);\n      } else {\n        // Retrieve from localStorage if available\n        const storedAccount = localStorage.getItem(\"connectedAccount\");\n        if (storedAccount) {\n          setConnectedAccount(storedAccount);\n          console.log(\"User is connected with stored account:\", storedAccount);\n        }\n      }\n    }, []);\n  \n    // Handle logout by clearing the state and localStorage\n    const handleLogout = () => {\n      setConnectedAccount(null);\n      localStorage.removeItem(\"connectedAccount\");\n      console.log(\"User disconnected.\");\n    };\n  \n    const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n    const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n    const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n    const provider = new ethers.JsonRpcProvider(customRpcUrl);\n\n    const hasInitialized = useRef(false);\n\n    const startNewGame = async () => {\n        if (loading || hasInitialized.current) return;\n        console.log(\"startNewGame called\");\n        hasInitialized.current = true;\n        setLoading(true);\n        setGameStarted(true);\n\n        try {\n            const response = await axios.get(backendUrl);\n            console.log(\"ðŸš€ ~ startNewGame ~ response:\", response);\n            const parsedNFTs = response.data.nfts.map((nft) => ({\n                id: nft.id,\n                metadata: JSON.parse(nft.metadata),\n            }));\n            setNfts(parsedNFTs);\n\n            await fetchLeaderboard(parsedNFTs);\n\n            setRankings({});\n            setAvailableRanks([...Array(parsedNFTs.length).keys()].map((i) => i + 1));\n        } catch (error) {\n            console.error(\"Error fetching NFTs:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const fetchLeaderboard = async () => {\n        try {\n            const contract = new ethers.Contract(contractAddress, ABI, provider);\n\n            const rawData = await contract.getLeaderboard(1);\n            const leaderboardData = rawData\n                .map((entry) => ({\n                    rank: Number(entry[0]),\n                    score: Number(entry[1]),\n                }))\n                .filter((entry) => entry.rank !== 0);\n\n            const leaderboardWithNames = await Promise.all(\n                leaderboardData.map(async (entry) => {\n                    try {\n                        const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n                        const nftName = response.data.name;\n                        return { ...entry, name: nftName };\n                    } catch (error) {\n                        console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n                        return { ...entry, name: \"Unknown\" };\n                    }\n                })\n            );\n\n            setLeaderboard(leaderboardWithNames);\n        } catch (err) {\n            console.error(\"Error fetching leaderboard:\", err);\n        }\n    };\n\n    const handleSubmitRanks = async () => {\n        // Ensure wallet is connected\n        if (!connectedAccount) {\n            setError(\"Please connect your wallet first.\");\n            return;\n        }\n    \n        // Validate that all NFTs are ranked\n        if (Object.keys(rankings).length !== nfts.length) {\n            setError(\"Please assign ranks to all NFTs.\");\n            return;\n        }\n    \n        // Prepare the rankings in the correct format\n        const ids = Object.entries(rankings)\n            .sort(([, rankA], [, rankB]) => rankA - rankB) // Sort by rank\n            .map(([index]) => {\n                const nft = nfts[Number(index)];\n                if (!nft || !nft.id) {\n                    throw new Error(`Missing or undefined ID for NFT at index ${index}`);\n                }\n                return nft.id; // Collect NFT IDs\n            });\n    \n        try {\n            setLoading(true);\n            setError(\"\");\n    \n            // Connect to MetaMask and get the signer\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n    \n            // Instantiate the contract\n            const contract = new ethers.Contract(contractAddress, ABI, signer);\n    \n            // Send the transaction\n            console.log(\"Submitting rankings:\", ids);\n            const tx = await contract.submit(ids); // Assuming `submit` is the contract method\n            await tx.wait(); // Wait for the transaction to be mined\n    \n            alert(\"Rankings submitted successfully!\");\n        } catch (err) {\n            console.error(\"Error submitting rankings:\", err);\n            setError(\"Failed to submit rankings. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n    \nconst connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n\n    if (isMetaMaskInstalled) {\n        try {\n            // Attempt to connect MetaMask directly\n            const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n            console.log(\"Connected account:\", accounts[0]);\n\n            // Store connected account in localStorage for persistence\n            localStorage.setItem(\"connectedAccount\", accounts[0]);\n\n            // Handle successful connection\n            alert(`Connected to account: ${accounts[0]}`);\n        } catch (err) {\n            console.error(\"MetaMask connection failed:\", err);\n        }\n    } else {\n        // Redirect to MetaMask app with your dApp deep link\n        const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\"; // Your dApp base domain (no protocol)\n        const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n\n        alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n        window.location.href = metamaskDeepLink;\n\n        // Poll for connection when redirected back to the app\n        const interval = setInterval(async () => {\n            if (typeof window.ethereum !== \"undefined\") {\n                try {\n                    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\n                    if (accounts && accounts.length > 0) {\n                        console.log(\"Connected account after return:\", accounts[0]);\n\n                        // Store the connected account and clear interval\n                        localStorage.setItem(\"connectedAccount\", accounts[0]);\n                        clearInterval(interval);\n\n                        // Handle connected account\n                        alert(`Connected to account: ${accounts[0]}`);\n                    }\n                } catch (err) {\n                    console.error(\"Error checking MetaMask accounts:\", err);\n                }\n            } else {\n                console.warn(\"Waiting for MetaMask to be installed.\");\n            }\n        }, 2000);\n    }\n};\n      \n      \n\n    const connectWalletConnect = async () => {\n        const walletConnectProvider = new WalletConnectProvider({\n            rpc: {\n                1: customRpcUrl,\n            },\n        });\n\n        try {\n            await walletConnectProvider.enable();\n            const web3Provider = new ethers.BrowserProvider(walletConnectProvider);\n            const signer = await web3Provider.getSigner();\n            const address = await signer.getAddress();\n            setWalletAddress(address);\n            setError(\"\");\n            setIsModalOpen(false);\n        } catch (err) {\n            console.error(\"Error connecting WalletConnect:\", err);\n            setError(\"Failed to connect WalletConnect. Please try again.\");\n        }\n    };\n\n    const handleAssignRank = (index, rank) => {\n        setRankings((prev) => ({ ...prev, [index]: rank }));\n        setAvailableRanks((prev) => prev.filter((r) => r !== rank));\n    };\n\n    useEffect(() => {\n        if (typeof window.ethereum !== \"undefined\") {\n            window.ethereum.on(\"accountsChanged\", (accounts) => {\n                if (accounts.length > 0) {\n                    setWalletAddress(accounts[0]);\n                } else {\n                    setWalletAddress(\"\");\n                    setError(\"Wallet disconnected.\");\n                }\n            });\n\n            window.ethereum.on(\"chainChanged\", () => {\n                window.location.reload();\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        startNewGame();\n    }, []);\n\n    return (\n        <div className=\"nft-cards-container\">\n            {loading ? (\n                <p>Loading...</p>\n            ) : (\n                <>\n                     <div className=\"wallet-connection\">\n                        {walletAddress ? (\n                            <>\n                                <p>Connected: {walletAddress}</p>\n                                <button onClick={handleLogout} className=\"logout-button\">\n                                    Log Out\n                                </button>\n                            </>\n                        ) : (\n                            <button onClick={() => setIsModalOpen(true)} className=\"connect-wallet-button\">\n                                Connect Wallet\n                            </button>\n                        )}\n                        {error && <p className=\"error-message\">{error}</p>}\n                    </div>\n\n                    {/* Include WalletModal component */}\n                    <WalletModal\n                        isOpen={isModalOpen}\n                        onClose={() => setIsModalOpen(false)}\n                        onConnectMetaMask={connectMetaMask}\n                        onConnectWalletConnect={connectWalletConnect}\n                    />\n\n                    <div className=\"cards-wrapper\">\n                        {nfts.map((nft, index) => (\n                            <div\n                                className={`nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`}\n                                key={index}\n                                style={{\n                                    opacity: rankings[index] ? 0.5 : 1,\n                                    pointerEvents: rankings[index] ? \"none\" : \"auto\",\n                                }}\n                            >\n                                <h3>{nft.metadata.name || `NFT ${index + 1}`}</h3>\n                                <img src={nft.metadata.image} alt={nft.metadata.name || \"NFT\"} />\n                                <div className=\"rank-buttons\">\n                                    {!rankings[index] &&\n                                        availableRanks.map((rank) => (\n                                            <button\n                                                key={rank}\n                                                onClick={() => handleAssignRank(index, rank)}\n                                                disabled={\n                                                    rankings[index] === rank ||\n                                                    !!Object.values(rankings).find((r) => r === rank)\n                                                }\n                                            >\n                                                {`Rank ${rank}`}\n                                            </button>\n                                        ))}\n                                </div>\n                                {rankings[index] && <p>Assigned Rank: {rankings[index]}</p>}\n                            </div>\n                        ))}\n                    </div>\n                    <button onClick={handleSubmitRanks} className=\"submit-ranks-button\">\n                        Submit Rankings\n                    </button>\n                    <div className=\"leaderboard-container\">\n                        <h2>Leaderboard</h2>\n                        <table className=\"leaderboard-table\">\n                            <thead>\n                                <tr>\n                                    <th>Id</th>\n                                    <th>Name</th>\n                                    <th>Score</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {leaderboard.map((entry, index) => (\n                                    <tr key={index}>\n                                        <td>{entry.rank}</td>\n                                        <td>{entry.name}</td>\n                                        <td>{entry.score}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default NFTCards;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}