{"ast":null,"code":"var _jsxFileName = \"/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\";\nimport ABI from \"../abi.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = LoadingSpinner;\nconst NFTCards = () => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [connectedAccount, setConnectedAccount] = useState(null);\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n  const provider = new ethers.JsonRpcProvider(customRpcUrl);\n  const hasInitialized = useRef(false);\n\n  // Retrieve connected wallet address from URL or localStorage\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const account = urlParams.get(\"account\");\n    if (account) {\n      console.log(\"User is connected with account:\", account);\n      setConnectedAccount(account);\n      localStorage.setItem(\"connectedAccount\", account);\n      const newUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState({}, document.title, newUrl);\n    } else {\n      const storedAccount = localStorage.getItem(\"connectedAccount\");\n      if (storedAccount) {\n        setConnectedAccount(storedAccount);\n        console.log(\"User is connected with stored account:\", storedAccount);\n      }\n    }\n  }, []);\n  const handleLogout = () => {\n    setWalletAddress(null);\n    localStorage.removeItem(\"connectedAccount\");\n    console.log(\"User disconnected.\");\n  };\n  const startNewGame = async () => {\n    if (loading || hasInitialized.current) return;\n    console.log(\"startNewGame called\");\n    hasInitialized.current = true;\n    setLoading(true);\n    setGameStarted(true);\n    try {\n      const response = await axios.get(backendUrl);\n      console.log(\"ðŸš€ ~ startNewGame ~ response:\", response);\n      const parsedNFTs = response.data.nfts.map(nft => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata)\n      }));\n      setNfts(parsedNFTs);\n      await fetchLeaderboard(parsedNFTs);\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map(i => i + 1));\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchLeaderboard = async () => {\n    try {\n      const contract = new ethers.Contract(contractAddress, ABI, provider);\n      const rawData = await contract.getLeaderboard(1);\n      const leaderboardData = rawData.map(entry => ({\n        rank: Number(entry[0]),\n        score: Number(entry[1])\n      })).filter(entry => entry.rank !== 0);\n      const leaderboardWithNames = await Promise.all(leaderboardData.map(async entry => {\n        try {\n          const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n          const nftName = response.data.name;\n          return {\n            ...entry,\n            name: nftName\n          };\n        } catch (error) {\n          console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n          return {\n            ...entry,\n            name: \"Unknown\"\n          };\n        }\n      }));\n      setLeaderboard(leaderboardWithNames);\n    } catch (err) {\n      console.error(\"Error fetching leaderboard:\", err);\n    }\n  };\n  const handleSubmitRanks = async () => {\n    if (!walletAddress) {\n      setError(\"Please connect your wallet first.\");\n      return;\n    }\n    if (Object.keys(rankings).length !== nfts.length) {\n      setError(\"Please assign ranks to all NFTs.\");\n      return;\n    }\n    const ids = Object.entries(rankings).sort(([, rankA], [, rankB]) => rankA - rankB).map(([index]) => {\n      const nft = nfts[Number(index)];\n      if (!nft || !nft.id) {\n        throw new Error(`Missing or undefined ID for NFT at index ${index}`);\n      }\n      return nft.id;\n    });\n    try {\n      setLoading(true);\n      setError(\"\");\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      console.log(\"Submitting rankings:\", ids);\n      const tx = await contract.submit(ids);\n      await tx.wait();\n      alert(\"Rankings submitted successfully!\");\n\n      // Fetch new NFTs and leaderboard\n      fetchNewGameData();\n    } catch (err) {\n      console.error(\"Error submitting rankings:\", err);\n      setError(\"Failed to submit rankings. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchNewGameData = async () => {\n    try {\n      setLoading(true);\n\n      // Fetch new NFTs\n      const response = await axios.get(backendUrl);\n      console.log(\"Fetched new NFTs:\", response.data.nfts);\n      const parsedNFTs = response.data.nfts.map(nft => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata)\n      }));\n\n      // Update state with new NFTs\n      setNfts(parsedNFTs);\n\n      // Reset rankings and available ranks\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map(i => i + 1));\n\n      // Fetch the updated leaderboard\n      await fetchLeaderboard();\n      console.log(\"Game reset complete.\");\n    } catch (err) {\n      console.error(\"Error fetching new game data:\", err);\n      setError(\"Failed to fetch new game data. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n    if (isMetaMaskInstalled) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const connectedAddress = accounts[0];\n        console.log(\"Connected account:\", connectedAddress);\n        setWalletAddress(connectedAddress);\n        localStorage.setItem(\"connectedAccount\", connectedAddress);\n        alert(`Connected to account: ${connectedAddress}`);\n      } catch (err) {\n        console.error(\"MetaMask connection failed:\", err);\n        setError(\"MetaMask connection failed. Please try again.\");\n      }\n    } else {\n      const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\";\n      const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n      alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n      window.location.href = metamaskDeepLink;\n    }\n  };\n  const connectWalletConnect = async () => {\n    const walletConnectProvider = new WalletConnectProvider({\n      rpc: {\n        1: customRpcUrl\n      }\n    });\n    try {\n      await walletConnectProvider.enable();\n      const web3Provider = new ethers.BrowserProvider(walletConnectProvider);\n      const signer = await web3Provider.getSigner();\n      const address = await signer.getAddress();\n      setWalletAddress(address);\n      setError(\"\");\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error(\"Error connecting WalletConnect:\", err);\n      setError(\"Failed to connect WalletConnect. Please try again.\");\n    }\n  };\n  const handleAssignRank = (index, rank) => {\n    setRankings(prev => ({\n      ...prev,\n      [index]: rank\n    }));\n    setAvailableRanks(prev => prev.filter(r => r !== rank));\n  };\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWalletAddress(accounts[0]);\n        } else {\n          setWalletAddress(\"\");\n          setError(\"Wallet disconnected.\");\n        }\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n  }, []);\n  useEffect(() => {\n    startNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-cards-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 19\n    }, this), !loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallet-connection\",\n        children: [walletAddress ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Connected: \", walletAddress]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLogout,\n            className: \"logout-button\",\n            children: \"Log Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectMetaMask,\n          className: \"connect-wallet-button\",\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 15\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(WalletModal, {\n        isOpen: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        onConnectMetaMask: connectMetaMask,\n        onConnectWalletConnect: connectWalletConnect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-wrapper\",\n        children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`,\n          style: {\n            opacity: rankings[index] ? 0.5 : 1,\n            pointerEvents: rankings[index] ? \"none\" : \"auto\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: nft.metadata.name || `NFT ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.metadata.image,\n            alt: nft.metadata.name || \"NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rank-buttons\",\n            children: !rankings[index] && availableRanks.map(rank => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAssignRank(index, rank),\n              disabled: rankings[index] === rank || !!Object.values(rankings).find(r => r === rank),\n              children: `Rank ${rank}`\n            }, rank, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this), rankings[index] && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Assigned Rank: \", rankings[index]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 37\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitRanks,\n        className: \"submit-ranks-button\",\n        children: \"Submit Rankings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"leaderboard-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: leaderboard.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.score\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(NFTCards, \"EAjAObQRPrUPDBcUvKZLdJYEFQw=\");\n_c2 = NFTCards;\nexport default NFTCards;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingSpinner\");\n$RefreshReg$(_c2, \"NFTCards\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ethers","WalletConnectProvider","WalletModal","ABI","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingSpinner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","NFTCards","_s","nfts","setNfts","loading","setLoading","gameStarted","setGameStarted","rankings","setRankings","availableRanks","setAvailableRanks","walletAddress","setWalletAddress","error","setError","leaderboard","setLeaderboard","isModalOpen","setIsModalOpen","connectedAccount","setConnectedAccount","backendUrl","contractAddress","customRpcUrl","provider","JsonRpcProvider","hasInitialized","urlParams","URLSearchParams","window","location","search","account","get","console","log","localStorage","setItem","newUrl","origin","pathname","history","replaceState","document","title","storedAccount","getItem","handleLogout","removeItem","startNewGame","current","response","parsedNFTs","data","map","nft","id","metadata","JSON","parse","fetchLeaderboard","Array","length","keys","i","contract","Contract","rawData","getLeaderboard","leaderboardData","entry","rank","Number","score","filter","leaderboardWithNames","Promise","all","nftName","name","err","handleSubmitRanks","Object","ids","entries","sort","rankA","rankB","index","Error","BrowserProvider","ethereum","signer","getSigner","tx","submit","wait","alert","fetchNewGameData","connectMetaMask","isMetaMaskInstalled","accounts","request","method","connectedAddress","dAppUrl","metamaskDeepLink","href","connectWalletConnect","walletConnectProvider","rpc","enable","web3Provider","address","getAddress","handleAssignRank","prev","r","on","reload","onClick","isOpen","onClose","onConnectMetaMask","onConnectWalletConnect","style","opacity","pointerEvents","src","image","alt","disabled","values","find","_c2","$RefreshReg$"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\";\nimport ABI from \"../abi.json\";\n\nconst LoadingSpinner = () => {\n  return (\n    <div className=\"loading-overlay\">\n      <div className=\"spinner\"></div>\n    </div>\n  );\n};\n\nconst NFTCards = () => {\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [connectedAccount, setConnectedAccount] = useState(null);\n\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n  const provider = new ethers.JsonRpcProvider(customRpcUrl);\n  const hasInitialized = useRef(false);\n\n  // Retrieve connected wallet address from URL or localStorage\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const account = urlParams.get(\"account\");\n\n    if (account) {\n      console.log(\"User is connected with account:\", account);\n      setConnectedAccount(account);\n      localStorage.setItem(\"connectedAccount\", account);\n\n      const newUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState({}, document.title, newUrl);\n    } else {\n      const storedAccount = localStorage.getItem(\"connectedAccount\");\n      if (storedAccount) {\n        setConnectedAccount(storedAccount);\n        console.log(\"User is connected with stored account:\", storedAccount);\n      }\n    }\n  }, []);\n\n  const handleLogout = () => {\n    setWalletAddress(null);\n    localStorage.removeItem(\"connectedAccount\");\n    console.log(\"User disconnected.\");\n  };\n\n  const startNewGame = async () => {\n    if (loading || hasInitialized.current) return;\n    console.log(\"startNewGame called\");\n    hasInitialized.current = true;\n    setLoading(true);\n    setGameStarted(true);\n\n    try {\n      const response = await axios.get(backendUrl);\n      console.log(\"ðŸš€ ~ startNewGame ~ response:\", response);\n      const parsedNFTs = response.data.nfts.map((nft) => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata),\n      }));\n      setNfts(parsedNFTs);\n\n      await fetchLeaderboard(parsedNFTs);\n\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map((i) => i + 1));\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchLeaderboard = async () => {\n    try {\n      const contract = new ethers.Contract(contractAddress, ABI, provider);\n\n      const rawData = await contract.getLeaderboard(1);\n      const leaderboardData = rawData\n        .map((entry) => ({\n          rank: Number(entry[0]),\n          score: Number(entry[1]),\n        }))\n        .filter((entry) => entry.rank !== 0);\n\n      const leaderboardWithNames = await Promise.all(\n        leaderboardData.map(async (entry) => {\n          try {\n            const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n            const nftName = response.data.name;\n            return { ...entry, name: nftName };\n          } catch (error) {\n            console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n            return { ...entry, name: \"Unknown\" };\n          }\n        })\n      );\n\n      setLeaderboard(leaderboardWithNames);\n    } catch (err) {\n      console.error(\"Error fetching leaderboard:\", err);\n    }\n  };\n  \n  const handleSubmitRanks = async () => {\n    if (!walletAddress) {\n        setError(\"Please connect your wallet first.\");\n        return;\n    }\n\n    if (Object.keys(rankings).length !== nfts.length) {\n        setError(\"Please assign ranks to all NFTs.\");\n        return;\n    }\n\n    const ids = Object.entries(rankings)\n        .sort(([, rankA], [, rankB]) => rankA - rankB)\n        .map(([index]) => {\n            const nft = nfts[Number(index)];\n            if (!nft || !nft.id) {\n                throw new Error(`Missing or undefined ID for NFT at index ${index}`);\n            }\n            return nft.id;\n        });\n\n    try {\n        setLoading(true);\n        setError(\"\");\n\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, ABI, signer);\n\n        console.log(\"Submitting rankings:\", ids);\n        const tx = await contract.submit(ids);\n        await tx.wait();\n\n        alert(\"Rankings submitted successfully!\");\n\n        // Fetch new NFTs and leaderboard\n        fetchNewGameData();\n    } catch (err) {\n        console.error(\"Error submitting rankings:\", err);\n        setError(\"Failed to submit rankings. Please try again.\");\n    } finally {\n        setLoading(false);\n    }\n};\n\nconst fetchNewGameData = async () => {\n    try {\n        setLoading(true);\n\n        // Fetch new NFTs\n        const response = await axios.get(backendUrl);\n        console.log(\"Fetched new NFTs:\", response.data.nfts);\n\n        const parsedNFTs = response.data.nfts.map((nft) => ({\n            id: nft.id,\n            metadata: JSON.parse(nft.metadata),\n        }));\n\n        // Update state with new NFTs\n        setNfts(parsedNFTs);\n\n        // Reset rankings and available ranks\n        setRankings({});\n        setAvailableRanks([...Array(parsedNFTs.length).keys()].map((i) => i + 1));\n\n        // Fetch the updated leaderboard\n        await fetchLeaderboard();\n\n        console.log(\"Game reset complete.\");\n    } catch (err) {\n        console.error(\"Error fetching new game data:\", err);\n        setError(\"Failed to fetch new game data. Please try again.\");\n    } finally {\n        setLoading(false);\n    }\n};\n\n\n  const connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n\n    if (isMetaMaskInstalled) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const connectedAddress = accounts[0];\n        console.log(\"Connected account:\", connectedAddress);\n\n        setWalletAddress(connectedAddress);\n        localStorage.setItem(\"connectedAccount\", connectedAddress);\n\n        alert(`Connected to account: ${connectedAddress}`);\n      } catch (err) {\n        console.error(\"MetaMask connection failed:\", err);\n        setError(\"MetaMask connection failed. Please try again.\");\n      }\n    } else {\n      const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\";\n      const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n\n      alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n      window.location.href = metamaskDeepLink;\n    }\n  };\n\n  const connectWalletConnect = async () => {\n    const walletConnectProvider = new WalletConnectProvider({\n      rpc: {\n        1: customRpcUrl,\n      },\n    });\n\n    try {\n      await walletConnectProvider.enable();\n      const web3Provider = new ethers.BrowserProvider(walletConnectProvider);\n      const signer = await web3Provider.getSigner();\n      const address = await signer.getAddress();\n      setWalletAddress(address);\n      setError(\"\");\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error(\"Error connecting WalletConnect:\", err);\n      setError(\"Failed to connect WalletConnect. Please try again.\");\n    }\n  };\n\n  const handleAssignRank = (index, rank) => {\n    setRankings((prev) => ({ ...prev, [index]: rank }));\n    setAvailableRanks((prev) => prev.filter((r) => r !== rank));\n  };\n\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWalletAddress(accounts[0]);\n        } else {\n          setWalletAddress(\"\");\n          setError(\"Wallet disconnected.\");\n        }\n      });\n\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    startNewGame();\n  }, []);\n\n  return (\n    <div className=\"nft-cards-container\">\n      {loading && <LoadingSpinner />}\n      {!loading ? (\n        <>\n          <div className=\"wallet-connection\">\n            {walletAddress ? (\n              <>\n                <p>Connected: {walletAddress}</p>\n                <button onClick={handleLogout} className=\"logout-button\">\n                  Log Out\n                </button>\n              </>\n            ) : (\n              <button\n                onClick={connectMetaMask}\n                className=\"connect-wallet-button\"\n              >\n                Connect Wallet\n              </button>\n            )}\n            {error && <p className=\"error-message\">{error}</p>}\n          </div>\n\n          <WalletModal\n            isOpen={isModalOpen}\n            onClose={() => setIsModalOpen(false)}\n            onConnectMetaMask={connectMetaMask}\n            onConnectWalletConnect={connectWalletConnect}\n          />\n\n          <div className=\"cards-wrapper\">\n            {nfts.map((nft, index) => (\n              <div\n                className={`nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`}\n                key={index}\n                style={{\n                  opacity: rankings[index] ? 0.5 : 1,\n                  pointerEvents: rankings[index] ? \"none\" : \"auto\",\n                }}\n              >\n                <h3>{nft.metadata.name || `NFT ${index + 1}`}</h3>\n                <img\n                  src={nft.metadata.image}\n                  alt={nft.metadata.name || \"NFT\"}\n                />\n                <div className=\"rank-buttons\">\n                  {!rankings[index] &&\n                    availableRanks.map((rank) => (\n                      <button\n                        key={rank}\n                        onClick={() => handleAssignRank(index, rank)}\n                        disabled={\n                          rankings[index] === rank ||\n                          !!Object.values(rankings).find((r) => r === rank)\n                        }\n                      >\n                        {`Rank ${rank}`}\n                      </button>\n                    ))}\n                </div>\n                {rankings[index] && <p>Assigned Rank: {rankings[index]}</p>}\n              </div>\n            ))}\n          </div>\n          <button onClick={handleSubmitRanks} className=\"submit-ranks-button\">\n            Submit Rankings\n          </button>\n          <div className=\"leaderboard-container\">\n            <h2>Leaderboard</h2>\n            <table className=\"leaderboard-table\">\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  <th>Name</th>\n                  <th>Score</th>\n                </tr>\n              </thead>\n              <tbody>\n                {leaderboard.map((entry, index) => (\n                  <tr key={index}>\n                    <td>{entry.rank}</td>\n                    <td>{entry.name}</td>\n                    <td>{entry.score}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default NFTCards;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}