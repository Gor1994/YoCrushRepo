{"ast":null,"code":"var _jsxFileName = \"/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\"; // Import the WalletModal component\nimport ABI from \"../abi.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NFTCards = () => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n  const provider = new ethers.JsonRpcProvider(customRpcUrl);\n\n  // Handle Wallet Logout\n  const handleLogout = () => {\n    setWalletAddress(\"\");\n    localStorage.removeItem(\"connectedAccount\");\n    console.log(\"User disconnected.\");\n  };\n\n  // Check if the user was redirected back from MetaMask\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const account = urlParams.get(\"account\");\n    if (account) {\n      setWalletAddress(account);\n      localStorage.setItem(\"connectedAccount\", account);\n\n      // Remove query parameters from the URL\n      const newUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState({}, document.title, newUrl);\n    } else {\n      // Retrieve from localStorage if available\n      const storedAccount = localStorage.getItem(\"connectedAccount\");\n      if (storedAccount) {\n        setWalletAddress(storedAccount);\n      }\n    }\n  }, []);\n\n  // Connect to MetaMask\n  const connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n    if (isMetaMaskInstalled) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(\"Connected account:\", accounts[0]);\n        setWalletAddress(accounts[0]);\n        localStorage.setItem(\"connectedAccount\", accounts[0]);\n        setIsModalOpen(false);\n      } catch (err) {\n        console.error(\"MetaMask connection failed:\", err);\n      }\n    } else {\n      const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\"; // Your dApp base domain (no protocol)\n      const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n      alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n      window.location.href = metamaskDeepLink;\n\n      // Optionally poll for connection when redirected back\n      const interval = setInterval(async () => {\n        if (typeof window.ethereum !== \"undefined\") {\n          try {\n            const accounts = await window.ethereum.request({\n              method: \"eth_accounts\"\n            });\n            if (accounts && accounts.length > 0) {\n              setWalletAddress(accounts[0]);\n              localStorage.setItem(\"connectedAccount\", accounts[0]);\n              clearInterval(interval);\n              alert(`Connected to account: ${accounts[0]}`);\n            }\n          } catch (err) {\n            console.error(\"Error checking MetaMask accounts:\", err);\n          }\n        }\n      }, 2000);\n    }\n  };\n  const connectWalletConnect = async () => {\n    const walletConnectProvider = new WalletConnectProvider({\n      rpc: {\n        1: customRpcUrl\n      }\n    });\n    try {\n      await walletConnectProvider.enable();\n      const web3Provider = new ethers.BrowserProvider(walletConnectProvider);\n      const signer = await web3Provider.getSigner();\n      const address = await signer.getAddress();\n      setWalletAddress(address);\n      localStorage.setItem(\"connectedAccount\", address);\n      setIsModalOpen(false);\n    } catch (err) {\n      console.error(\"Error connecting WalletConnect:\", err);\n      setError(\"Failed to connect WalletConnect. Please try again.\");\n    }\n  };\n  useEffect(() => {\n    if (walletAddress) {\n      setIsModalOpen(false); // Close modal if the wallet is already connected\n    }\n  }, [walletAddress]);\n\n  // Redirect to Telegram Mini App\n  useEffect(() => {\n    if (walletAddress && window.navigator.userAgent.includes(\"Telegram\")) {\n      const redirectUrl = `tg://resolve?domain=${walletAddress}`;\n      window.location.href = redirectUrl;\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-cards-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallet-connection\",\n        children: [walletAddress ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Connected: \", walletAddress]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLogout,\n            className: \"logout-button\",\n            children: \"Log Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsModalOpen(true),\n          className: \"connect-wallet-button\",\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(WalletModal, {\n        isOpen: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        onConnectMetaMask: connectMetaMask,\n        onConnectWalletConnect: connectWalletConnect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-wrapper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTCards, \"xyh/V+h1XEgfITY/UKatbht9GfI=\");\n_c = NFTCards;\nexport default NFTCards;\nvar _c;\n$RefreshReg$(_c, \"NFTCards\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ethers","WalletConnectProvider","WalletModal","ABI","jsxDEV","_jsxDEV","Fragment","_Fragment","NFTCards","_s","nfts","setNfts","loading","setLoading","rankings","setRankings","availableRanks","setAvailableRanks","walletAddress","setWalletAddress","error","setError","leaderboard","setLeaderboard","isModalOpen","setIsModalOpen","backendUrl","contractAddress","customRpcUrl","provider","JsonRpcProvider","handleLogout","localStorage","removeItem","console","log","urlParams","URLSearchParams","window","location","search","account","get","setItem","newUrl","origin","pathname","history","replaceState","document","title","storedAccount","getItem","connectMetaMask","isMetaMaskInstalled","ethereum","accounts","request","method","err","dAppUrl","metamaskDeepLink","alert","href","interval","setInterval","length","clearInterval","connectWalletConnect","walletConnectProvider","rpc","enable","web3Provider","BrowserProvider","signer","getSigner","address","getAddress","navigator","userAgent","includes","redirectUrl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onClose","onConnectMetaMask","onConnectWalletConnect","_c","$RefreshReg$"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\"; // Import the WalletModal component\nimport ABI from \"../abi.json\";\n\nconst NFTCards = () => {\n    const [nfts, setNfts] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [rankings, setRankings] = useState({});\n    const [availableRanks, setAvailableRanks] = useState([]);\n    const [walletAddress, setWalletAddress] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [leaderboard, setLeaderboard] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n    const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n    const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n    const provider = new ethers.JsonRpcProvider(customRpcUrl);\n\n    // Handle Wallet Logout\n    const handleLogout = () => {\n        setWalletAddress(\"\");\n        localStorage.removeItem(\"connectedAccount\");\n        console.log(\"User disconnected.\");\n    };\n\n    // Check if the user was redirected back from MetaMask\n    useEffect(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n        const account = urlParams.get(\"account\");\n\n        if (account) {\n            setWalletAddress(account);\n            localStorage.setItem(\"connectedAccount\", account);\n\n            // Remove query parameters from the URL\n            const newUrl = window.location.origin + window.location.pathname;\n            window.history.replaceState({}, document.title, newUrl);\n        } else {\n            // Retrieve from localStorage if available\n            const storedAccount = localStorage.getItem(\"connectedAccount\");\n            if (storedAccount) {\n                setWalletAddress(storedAccount);\n            }\n        }\n    }, []);\n\n    // Connect to MetaMask\n    const connectMetaMask = async () => {\n        const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n\n        if (isMetaMaskInstalled) {\n            try {\n                const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n                console.log(\"Connected account:\", accounts[0]);\n                setWalletAddress(accounts[0]);\n                localStorage.setItem(\"connectedAccount\", accounts[0]);\n                setIsModalOpen(false);\n            } catch (err) {\n                console.error(\"MetaMask connection failed:\", err);\n            }\n        } else {\n            const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\"; // Your dApp base domain (no protocol)\n            const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n\n            alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n            window.location.href = metamaskDeepLink;\n\n            // Optionally poll for connection when redirected back\n            const interval = setInterval(async () => {\n                if (typeof window.ethereum !== \"undefined\") {\n                    try {\n                        const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\n                        if (accounts && accounts.length > 0) {\n                            setWalletAddress(accounts[0]);\n                            localStorage.setItem(\"connectedAccount\", accounts[0]);\n                            clearInterval(interval);\n                            alert(`Connected to account: ${accounts[0]}`);\n                        }\n                    } catch (err) {\n                        console.error(\"Error checking MetaMask accounts:\", err);\n                    }\n                }\n            }, 2000);\n        }\n    };\n\n    const connectWalletConnect = async () => {\n        const walletConnectProvider = new WalletConnectProvider({\n            rpc: { 1: customRpcUrl },\n        });\n\n        try {\n            await walletConnectProvider.enable();\n            const web3Provider = new ethers.BrowserProvider(walletConnectProvider);\n            const signer = await web3Provider.getSigner();\n            const address = await signer.getAddress();\n            setWalletAddress(address);\n            localStorage.setItem(\"connectedAccount\", address);\n            setIsModalOpen(false);\n        } catch (err) {\n            console.error(\"Error connecting WalletConnect:\", err);\n            setError(\"Failed to connect WalletConnect. Please try again.\");\n        }\n    };\n\n    useEffect(() => {\n        if (walletAddress) {\n            setIsModalOpen(false); // Close modal if the wallet is already connected\n        }\n    }, [walletAddress]);\n\n    // Redirect to Telegram Mini App\n    useEffect(() => {\n        if (walletAddress && window.navigator.userAgent.includes(\"Telegram\")) {\n            const redirectUrl = `tg://resolve?domain=${walletAddress}`;\n            window.location.href = redirectUrl;\n        }\n    }, [walletAddress]);\n\n    return (\n        <div className=\"nft-cards-container\">\n            {loading ? (\n                <p>Loading...</p>\n            ) : (\n                <>\n                    <div className=\"wallet-connection\">\n                        {walletAddress ? (\n                            <>\n                                <p>Connected: {walletAddress}</p>\n                                <button onClick={handleLogout} className=\"logout-button\">\n                                    Log Out\n                                </button>\n                            </>\n                        ) : (\n                            <button onClick={() => setIsModalOpen(true)} className=\"connect-wallet-button\">\n                                Connect Wallet\n                            </button>\n                        )}\n                        {error && <p className=\"error-message\">{error}</p>}\n                    </div>\n\n                    <WalletModal\n                        isOpen={isModalOpen}\n                        onClose={() => setIsModalOpen(false)}\n                        onConnectMetaMask={connectMetaMask}\n                        onConnectWalletConnect={connectWalletConnect}\n                    />\n\n                    <div className=\"cards-wrapper\">\n                        {/* Render NFT Cards */}\n                    </div>\n\n                    <div className=\"leaderboard-container\">\n                        {/* Render Leaderboard */}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default NFTCards;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}