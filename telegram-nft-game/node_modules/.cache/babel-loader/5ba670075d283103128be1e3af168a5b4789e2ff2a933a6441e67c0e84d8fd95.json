{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import Game from\"./Components/Game\";import Header from\"./Components/Header\";import\"./styles/styles.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[walletAddress,setWalletAddress]=useState(\"\");const[gameType,setGameType]=useState(1);// Default game type is Singers (1)\nuseEffect(()=>{const storedWallet=localStorage.getItem(\"connectedAccount\");if(storedWallet){setWalletAddress(storedWallet);console.log(\"Restored wallet address from localStorage:\",storedWallet);}},[]);const handleLogout=()=>{setWalletAddress(null);localStorage.removeItem(\"connectedAccount\");console.log(\"User disconnected.\");};const connectMetaMask=async()=>{const isMetaMaskInstalled=typeof window.ethereum!==\"undefined\";if(isMetaMaskInstalled){try{const accounts=await window.ethereum.request({method:\"eth_requestAccounts\"});const connectedAddress=accounts[0];setWalletAddress(connectedAddress);localStorage.setItem(\"connectedAccount\",connectedAddress);alert(\"Connected to account: \".concat(connectedAddress));}catch(err){console.error(\"MetaMask connection failed:\",err);}}else{const dAppUrl=\"7ece-37-157-219-187.ngrok-free.app\";const metamaskDeepLink=\"https://metamask.app.link/dapp/\".concat(dAppUrl);alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");window.location.href=metamaskDeepLink;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{walletAddress:walletAddress,onConnect:connectMetaMask,onDisconnect:handleLogout,onGameTypeChange:setGameType// Pass setGameType to Header\n}),/*#__PURE__*/_jsx(Game,{gameType:gameType}),\" \"]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","Game","Header","jsx","_jsx","jsxs","_jsxs","App","walletAddress","setWalletAddress","gameType","setGameType","storedWallet","localStorage","getItem","console","log","handleLogout","removeItem","connectMetaMask","isMetaMaskInstalled","window","ethereum","accounts","request","method","connectedAddress","setItem","alert","concat","err","error","dAppUrl","metamaskDeepLink","location","href","className","children","onConnect","onDisconnect","onGameTypeChange"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Game from \"./Components/Game\";\nimport Header from \"./Components/Header\";\nimport \"./styles/styles.css\";\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [gameType, setGameType] = useState(1); // Default game type is Singers (1)\n\n  useEffect(() => {\n    const storedWallet = localStorage.getItem(\"connectedAccount\");\n    if (storedWallet) {\n      setWalletAddress(storedWallet);\n      console.log(\"Restored wallet address from localStorage:\", storedWallet);\n    }\n  }, []);\n\n  const handleLogout = () => {\n    setWalletAddress(null);\n    localStorage.removeItem(\"connectedAccount\");\n    console.log(\"User disconnected.\");\n  };\n\n  const connectMetaMask = async () => {\n    const isMetaMaskInstalled = typeof window.ethereum !== \"undefined\";\n\n    if (isMetaMaskInstalled) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const connectedAddress = accounts[0];\n\n        setWalletAddress(connectedAddress);\n        localStorage.setItem(\"connectedAccount\", connectedAddress);\n\n        alert(`Connected to account: ${connectedAddress}`);\n      } catch (err) {\n        console.error(\"MetaMask connection failed:\", err);\n      }\n    } else {\n      const dAppUrl = \"7ece-37-157-219-187.ngrok-free.app\";\n      const metamaskDeepLink = `https://metamask.app.link/dapp/${dAppUrl}`;\n\n      alert(\"Redirecting to MetaMask. Please return to the app after connecting.\");\n      window.location.href = metamaskDeepLink;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header\n        walletAddress={walletAddress}\n        onConnect={connectMetaMask}\n        onDisconnect={handleLogout}\n        onGameTypeChange={setGameType} // Pass setGameType to Header\n      />\n      <Game gameType={gameType} /> {/* Pass gameType to Game */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,IAAI,KAAM,mBAAmB,CACpC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE7B,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACW,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAE;AAE7CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,YAAY,CAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,CAC7D,GAAIF,YAAY,CAAE,CAChBH,gBAAgB,CAACG,YAAY,CAAC,CAC9BG,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAEJ,YAAY,CAAC,CACzE,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAK,YAAY,CAAGA,CAAA,GAAM,CACzBR,gBAAgB,CAAC,IAAI,CAAC,CACtBI,YAAY,CAACK,UAAU,CAAC,kBAAkB,CAAC,CAC3CH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACnC,CAAC,CAED,KAAM,CAAAG,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,KAAM,CAAAC,mBAAmB,CAAG,MAAO,CAAAC,MAAM,CAACC,QAAQ,GAAK,WAAW,CAElE,GAAIF,mBAAmB,CAAE,CACvB,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC,CAC7CC,MAAM,CAAE,qBACV,CAAC,CAAC,CACF,KAAM,CAAAC,gBAAgB,CAAGH,QAAQ,CAAC,CAAC,CAAC,CAEpCd,gBAAgB,CAACiB,gBAAgB,CAAC,CAClCb,YAAY,CAACc,OAAO,CAAC,kBAAkB,CAAED,gBAAgB,CAAC,CAE1DE,KAAK,0BAAAC,MAAA,CAA0BH,gBAAgB,CAAE,CAAC,CACpD,CAAE,MAAOI,GAAG,CAAE,CACZf,OAAO,CAACgB,KAAK,CAAC,6BAA6B,CAAED,GAAG,CAAC,CACnD,CACF,CAAC,IAAM,CACL,KAAM,CAAAE,OAAO,CAAG,oCAAoC,CACpD,KAAM,CAAAC,gBAAgB,mCAAAJ,MAAA,CAAqCG,OAAO,CAAE,CAEpEJ,KAAK,CAAC,qEAAqE,CAAC,CAC5EP,MAAM,CAACa,QAAQ,CAACC,IAAI,CAAGF,gBAAgB,CACzC,CACF,CAAC,CAED,mBACE3B,KAAA,QAAK8B,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBjC,IAAA,CAACF,MAAM,EACLM,aAAa,CAAEA,aAAc,CAC7B8B,SAAS,CAAEnB,eAAgB,CAC3BoB,YAAY,CAAEtB,YAAa,CAC3BuB,gBAAgB,CAAE7B,WAAa;AAAA,CAChC,CAAC,cACFP,IAAA,CAACH,IAAI,EAACS,QAAQ,CAAEA,QAAS,CAAE,CAAC,IAAC,EAC1B,CAAC,CAEV,CAAC,CAED,cAAe,CAAAH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}