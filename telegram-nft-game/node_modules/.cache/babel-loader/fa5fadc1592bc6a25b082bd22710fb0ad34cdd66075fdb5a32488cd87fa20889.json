{"ast":null,"code":"var _jsxFileName = \"/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\";\nimport ABI from \"../abi.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = LoadingSpinner;\nconst NFTCards = () => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  //   const [gameStarted, setGameStarted] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  //   const [error, setError] = useState(\"\");\n  //   const [isModalOpen, setIsModalOpen] = useState(false);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n  const provider = new ethers.JsonRpcProvider(customRpcUrl);\n  const hasInitialized = useRef(false);\n  useEffect(() => {\n    const storedWalletAddress = localStorage.getItem(\"connectedAccount\");\n    if (storedWalletAddress) {\n      setWalletAddress(storedWalletAddress);\n      console.log(\"Restored wallet address from storage:\", storedWalletAddress);\n    }\n  }, []);\n  const handleLogout = () => {\n    setWalletAddress(null);\n    localStorage.removeItem(\"connectedAccount\");\n    setError(\"\");\n    setIsModalOpen(false);\n    console.log(\"User disconnected.\");\n  };\n  const startNewGame = async () => {\n    if (loading || hasInitialized.current) return;\n    console.log(\"startNewGame called\");\n    hasInitialized.current = true;\n    setLoading(true);\n    setGameStarted(true);\n    try {\n      const response = await axios.get(backendUrl);\n      console.log(\"ðŸš€ ~ startNewGame ~ response:\", response);\n      const parsedNFTs = response.data.nfts.map(nft => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata)\n      }));\n      setNfts(parsedNFTs);\n      await fetchLeaderboard(parsedNFTs);\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map(i => i + 1));\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchLeaderboard = async () => {\n    try {\n      const contract = new ethers.Contract(contractAddress, ABI, provider);\n      const rawData = await contract.getLeaderboard(1);\n      const leaderboardData = rawData.map(entry => ({\n        rank: Number(entry[0]),\n        score: Number(entry[1])\n      })).filter(entry => entry.rank !== 0);\n      const leaderboardWithNames = await Promise.all(leaderboardData.map(async entry => {\n        try {\n          const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n          const nftName = response.data.name;\n          return {\n            ...entry,\n            name: nftName\n          };\n        } catch (error) {\n          console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n          return {\n            ...entry,\n            name: \"Unknown\"\n          };\n        }\n      }));\n      setLeaderboard(leaderboardWithNames);\n    } catch (err) {\n      console.error(\"Error fetching leaderboard:\", err);\n    }\n  };\n  const handleSubmitRanks = async () => {\n    if (!walletAddress) {\n      setError(\"Please connect your wallet first.\");\n      return;\n    }\n    if (Object.keys(rankings).length !== nfts.length) {\n      setError(\"Please assign ranks to all NFTs.\");\n      return;\n    }\n    const ids = Object.entries(rankings).sort(([, rankA], [, rankB]) => rankA - rankB).map(([index]) => {\n      const nft = nfts[Number(index)];\n      if (!nft || !nft.id) {\n        throw new Error(`Missing or undefined ID for NFT at index ${index}`);\n      }\n      return nft.id;\n    });\n    try {\n      setLoading(true);\n      setError(\"\");\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      console.log(\"Submitting rankings:\", ids);\n      const tx = await contract.submit(ids);\n      await tx.wait();\n      alert(\"Rankings submitted successfully!\");\n      fetchNewGameData();\n    } catch (err) {\n      console.error(\"Error submitting rankings:\", err);\n      setError(\"Failed to submit rankings. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchNewGameData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(backendUrl);\n      const parsedNFTs = response.data.nfts.map(nft => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata)\n      }));\n      setNfts(parsedNFTs);\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map(i => i + 1));\n      await fetchLeaderboard();\n      console.log(\"Game reset complete.\");\n    } catch (err) {\n      console.error(\"Error fetching new game data:\", err);\n      setError(\"Failed to fetch new game data. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAssignRank = (index, rank) => {\n    setRankings(prev => ({\n      ...prev,\n      [index]: rank\n    }));\n    setAvailableRanks(prev => prev.filter(r => r !== rank));\n  };\n\n  //   useEffect(() => {\n  //     if (typeof window.ethereum !== \"undefined\") {\n  //       window.ethereum.on(\"accountsChanged\", (accounts) => {\n  //         if (accounts.length > 0) {\n  //           setWalletAddress(accounts[0]);\n  //         } else {\n  //           handleLogout();\n  //         }\n  //       });\n\n  //       window.ethereum.on(\"chainChanged\", () => {\n  //         window.location.reload();\n  //       });\n  //     }\n  //   }, []);\n\n  useEffect(() => {\n    startNewGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-cards-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 19\n    }, this), !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-wrapper\",\n        children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`,\n          style: {\n            opacity: rankings[index] ? 0.5 : 1,\n            pointerEvents: rankings[index] ? \"none\" : \"auto\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: nft.metadata.name || `NFT ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.metadata.image,\n            alt: nft.metadata.name || \"NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rank-buttons\",\n            children: !rankings[index] && availableRanks.map(rank => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAssignRank(index, rank),\n              disabled: rankings[index] === rank || !!Object.values(rankings).find(r => r === rank),\n              children: `Rank ${rank}`\n            }, rank, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this), rankings[index] && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Assigned Rank: \", rankings[index]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 37\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitRanks,\n        className: \"submit-ranks-button\",\n        children: \"Submit Rankings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"leaderboard-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: leaderboard.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.score\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(NFTCards, \"Y+ZjlY4Uq0NMtgZKuxg3a4LdaU0=\");\n_c2 = NFTCards;\nexport default NFTCards;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingSpinner\");\n$RefreshReg$(_c2, \"NFTCards\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ethers","WalletConnectProvider","WalletModal","ABI","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingSpinner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","NFTCards","_s","nfts","setNfts","loading","setLoading","rankings","setRankings","availableRanks","setAvailableRanks","walletAddress","setWalletAddress","leaderboard","setLeaderboard","backendUrl","contractAddress","customRpcUrl","provider","JsonRpcProvider","hasInitialized","storedWalletAddress","localStorage","getItem","console","log","handleLogout","removeItem","setError","setIsModalOpen","startNewGame","current","setGameStarted","response","get","parsedNFTs","data","map","nft","id","metadata","JSON","parse","fetchLeaderboard","Array","length","keys","i","error","contract","Contract","rawData","getLeaderboard","leaderboardData","entry","rank","Number","score","filter","leaderboardWithNames","Promise","all","nftName","name","err","handleSubmitRanks","Object","ids","entries","sort","rankA","rankB","index","Error","BrowserProvider","window","ethereum","signer","getSigner","tx","submit","wait","alert","fetchNewGameData","handleAssignRank","prev","r","style","opacity","pointerEvents","src","image","alt","onClick","disabled","values","find","_c2","$RefreshReg$"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletModal from \"./WalletModal\";\nimport ABI from \"../abi.json\";\n\nconst LoadingSpinner = () => {\n  return (\n    <div className=\"loading-overlay\">\n      <div className=\"spinner\"></div>\n    </div>\n  );\n};\n\nconst NFTCards = () => {\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n//   const [gameStarted, setGameStarted] = useState(false);\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n  const [leaderboard, setLeaderboard] = useState([]);\n\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your backend API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const customRpcUrl = \"https://rpc2.bahamut.io\"; // Replace with your custom RPC URL\n\n  const provider = new ethers.JsonRpcProvider(customRpcUrl);\n  const hasInitialized = useRef(false);\n\n  useEffect(() => {\n    const storedWalletAddress = localStorage.getItem(\"connectedAccount\");\n    if (storedWalletAddress) {\n      setWalletAddress(storedWalletAddress);\n      console.log(\"Restored wallet address from storage:\", storedWalletAddress);\n    }\n  }, []);\n\n  const handleLogout = () => {\n    setWalletAddress(null);\n    localStorage.removeItem(\"connectedAccount\");\n    setError(\"\");\n    setIsModalOpen(false);\n    console.log(\"User disconnected.\");\n  };\n\n  const startNewGame = async () => {\n    if (loading || hasInitialized.current) return;\n    console.log(\"startNewGame called\");\n    hasInitialized.current = true;\n    setLoading(true);\n    setGameStarted(true);\n\n    try {\n      const response = await axios.get(backendUrl);\n      console.log(\"ðŸš€ ~ startNewGame ~ response:\", response);\n      const parsedNFTs = response.data.nfts.map((nft) => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata),\n      }));\n      setNfts(parsedNFTs);\n\n      await fetchLeaderboard(parsedNFTs);\n\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map((i) => i + 1));\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchLeaderboard = async () => {\n    try {\n      const contract = new ethers.Contract(contractAddress, ABI, provider);\n\n      const rawData = await contract.getLeaderboard(1);\n      const leaderboardData = rawData\n        .map((entry) => ({\n          rank: Number(entry[0]),\n          score: Number(entry[1]),\n        }))\n        .filter((entry) => entry.rank !== 0);\n\n      const leaderboardWithNames = await Promise.all(\n        leaderboardData.map(async (entry) => {\n          try {\n            const response = await axios.get(`${backendUrl}/nft/${entry.rank}`);\n            const nftName = response.data.name;\n            return { ...entry, name: nftName };\n          } catch (error) {\n            console.error(`Error fetching NFT name for ID ${entry.rank}:`, error);\n            return { ...entry, name: \"Unknown\" };\n          }\n        })\n      );\n\n      setLeaderboard(leaderboardWithNames);\n    } catch (err) {\n      console.error(\"Error fetching leaderboard:\", err);\n    }\n  };\n\n  const handleSubmitRanks = async () => {\n    if (!walletAddress) {\n      setError(\"Please connect your wallet first.\");\n      return;\n    }\n\n    if (Object.keys(rankings).length !== nfts.length) {\n      setError(\"Please assign ranks to all NFTs.\");\n      return;\n    }\n\n    const ids = Object.entries(rankings)\n      .sort(([, rankA], [, rankB]) => rankA - rankB)\n      .map(([index]) => {\n        const nft = nfts[Number(index)];\n        if (!nft || !nft.id) {\n          throw new Error(`Missing or undefined ID for NFT at index ${index}`);\n        }\n        return nft.id;\n      });\n\n    try {\n      setLoading(true);\n      setError(\"\");\n\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n\n      console.log(\"Submitting rankings:\", ids);\n      const tx = await contract.submit(ids);\n      await tx.wait();\n\n      alert(\"Rankings submitted successfully!\");\n\n      fetchNewGameData();\n    } catch (err) {\n      console.error(\"Error submitting rankings:\", err);\n      setError(\"Failed to submit rankings. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchNewGameData = async () => {\n    try {\n      setLoading(true);\n\n      const response = await axios.get(backendUrl);\n      const parsedNFTs = response.data.nfts.map((nft) => ({\n        id: nft.id,\n        metadata: JSON.parse(nft.metadata),\n      }));\n\n      setNfts(parsedNFTs);\n\n      setRankings({});\n      setAvailableRanks([...Array(parsedNFTs.length).keys()].map((i) => i + 1));\n\n      await fetchLeaderboard();\n\n      console.log(\"Game reset complete.\");\n    } catch (err) {\n      console.error(\"Error fetching new game data:\", err);\n      setError(\"Failed to fetch new game data. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAssignRank = (index, rank) => {\n    setRankings((prev) => ({ ...prev, [index]: rank }));\n    setAvailableRanks((prev) => prev.filter((r) => r !== rank));\n  };\n\n//   useEffect(() => {\n//     if (typeof window.ethereum !== \"undefined\") {\n//       window.ethereum.on(\"accountsChanged\", (accounts) => {\n//         if (accounts.length > 0) {\n//           setWalletAddress(accounts[0]);\n//         } else {\n//           handleLogout();\n//         }\n//       });\n\n//       window.ethereum.on(\"chainChanged\", () => {\n//         window.location.reload();\n//       });\n//     }\n//   }, []);\n\n  useEffect(() => {\n    startNewGame();\n  }, []);\n\n  return (\n    <div className=\"nft-cards-container\">\n      {loading && <LoadingSpinner />}\n      {!loading && (\n        <>\n          <div className=\"cards-wrapper\">\n            {nfts.map((nft, index) => (\n              <div\n                className={`nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`}\n                key={index}\n                style={{\n                  opacity: rankings[index] ? 0.5 : 1,\n                  pointerEvents: rankings[index] ? \"none\" : \"auto\",\n                }}\n              >\n                <h3>{nft.metadata.name || `NFT ${index + 1}`}</h3>\n                <img src={nft.metadata.image} alt={nft.metadata.name || \"NFT\"} />\n                <div className=\"rank-buttons\">\n                  {!rankings[index] &&\n                    availableRanks.map((rank) => (\n                      <button\n                        key={rank}\n                        onClick={() => handleAssignRank(index, rank)}\n                        disabled={\n                          rankings[index] === rank ||\n                          !!Object.values(rankings).find((r) => r === rank)\n                        }\n                      >\n                        {`Rank ${rank}`}\n                      </button>\n                    ))}\n                </div>\n                {rankings[index] && <p>Assigned Rank: {rankings[index]}</p>}\n              </div>\n            ))}\n          </div>\n          <button onClick={handleSubmitRanks} className=\"submit-ranks-button\">\n            Submit Rankings\n          </button>\n          <div className=\"leaderboard-container\">\n            <h2>Leaderboard</h2>\n            <table className=\"leaderboard-table\">\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  <th>Name</th>\n                  <th>Score</th>\n                </tr>\n              </thead>\n              <tbody>\n                {leaderboard.map((entry, index) => (\n                  <tr key={index}>\n                    <td>{entry.rank}</td>\n                    <td>{entry.name}</td>\n                    <td>{entry.score}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default NFTCards;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}