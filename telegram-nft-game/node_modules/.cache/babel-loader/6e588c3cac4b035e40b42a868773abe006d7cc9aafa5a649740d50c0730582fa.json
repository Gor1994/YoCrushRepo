{"ast":null,"code":"var _jsxFileName = \"/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport ABI from \"../abi.json\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"loading-overlay\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinner\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n_c = LoadingSpinner;\nconst NFTCards = ({\n  gameType\n}) => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const provider = new ethers.JsonRpcProvider(\"https://rpc2.bahamut.io\"); // Replace with your custom RPC URL\n\n  useEffect(() => {\n    const storedWallet = localStorage.getItem(\"connectedAccount\");\n    if (storedWallet) setWalletAddress(storedWallet);\n  }, []);\n  useEffect(() => {\n    const fetchGameData = async () => {\n      setLoading(true);\n      try {\n        // Fetch NFTs\n        const nftResponse = await axios.get(`${backendUrl}/nfts`, {\n          params: {\n            gameType\n          }\n        });\n        const parsedNFTs = nftResponse.data.nfts.map(nft => ({\n          id: nft.id,\n          metadata: JSON.parse(nft.metadata)\n        }));\n        setNfts(parsedNFTs);\n\n        // Reset rankings and available ranks\n        setRankings({});\n        setAvailableRanks([...Array(parsedNFTs.length).keys()].map(i => i + 1));\n\n        // Fetch leaderboard\n        const leaderboardResponse = await axios.get(`${backendUrl}/leaderboard`, {\n          params: {\n            gameType\n          }\n        });\n        setLeaderboard(leaderboardResponse.data.leaderboard || []);\n      } catch (err) {\n        console.error(\"Error fetching game data:\", err.message);\n        setError(\"Failed to load game data. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchGameData();\n  }, []);\n  const handleAssignRank = (index, rank) => {\n    setRankings(prev => ({\n      ...prev,\n      [index]: rank\n    }));\n    setAvailableRanks(prev => prev.filter(r => r !== rank));\n  };\n  const handleSubmitRanks = async () => {\n    if (!walletAddress) {\n      setError(\"Please connect your wallet first.\");\n      return;\n    }\n    if (Object.keys(rankings).length !== nfts.length) {\n      setError(\"Please assign ranks to all NFTs.\");\n      return;\n    }\n    const rankedIds = Object.entries(rankings).sort(([, rankA], [, rankB]) => rankA - rankB).map(([index]) => nfts[Number(index)].id);\n    try {\n      setLoading(true);\n      setError(\"\");\n      const signer = new ethers.BrowserProvider(window.ethereum).getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n      const tx = await contract.submit(rankedIds);\n      await tx.wait();\n      alert(\"Rankings submitted successfully!\");\n      // Refresh game data after submission\n      setLoading(true);\n      setTimeout(() => {\n        window.location.reload();\n      }, 500);\n    } catch (err) {\n      console.error(\"Error submitting rankings:\", err.message);\n      setError(\"Failed to submit rankings. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-cards-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }, this), !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-wrapper\",\n        children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`,\n          style: {\n            opacity: rankings[index] ? 0.5 : 1,\n            pointerEvents: rankings[index] ? \"none\" : \"auto\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: nft.metadata.name || `NFT ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.metadata.image,\n            alt: nft.metadata.name || \"NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rank-buttons\",\n            children: !rankings[index] && availableRanks.map(rank => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAssignRank(index, rank),\n              disabled: rankings[index] === rank || !!Object.values(rankings).includes(rank),\n              children: `Rank ${rank}`\n            }, rank, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), rankings[index] && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Assigned Rank: \", rankings[index]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 37\n          }, this)]\n        }, nft.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitRanks,\n        className: \"submit-ranks-button\",\n        children: \"Submit Rankings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"leaderboard-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Rank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: leaderboard.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.score\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(NFTCards, \"UyPAF1J+3g4OtuNdcKo/NvoHQhE=\");\n_c2 = NFTCards;\nexport default NFTCards;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingSpinner\");\n$RefreshReg$(_c2, \"NFTCards\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ethers","ABI","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingSpinner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","NFTCards","gameType","_s","nfts","setNfts","leaderboard","setLeaderboard","loading","setLoading","walletAddress","setWalletAddress","error","setError","rankings","setRankings","availableRanks","setAvailableRanks","backendUrl","contractAddress","provider","JsonRpcProvider","storedWallet","localStorage","getItem","fetchGameData","nftResponse","get","params","parsedNFTs","data","map","nft","id","metadata","JSON","parse","Array","length","keys","i","leaderboardResponse","err","console","message","handleAssignRank","index","rank","prev","filter","r","handleSubmitRanks","Object","rankedIds","entries","sort","rankA","rankB","Number","signer","BrowserProvider","window","ethereum","getSigner","contract","Contract","tx","submit","wait","alert","setTimeout","location","reload","style","opacity","pointerEvents","name","src","image","alt","onClick","disabled","values","includes","entry","score","_c2","$RefreshReg$"],"sources":["/home/gor/vozniProjects/NFTTelegramGame/telegram-nft-game/src/Components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport ABI from \"../abi.json\";\n\nconst LoadingSpinner = () => (\n  <div className=\"loading-overlay\">\n    <div className=\"spinner\"></div>\n  </div>\n);\n\nconst NFTCards = ({ gameType }) => {\n  const [nfts, setNfts] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [rankings, setRankings] = useState({});\n  const [availableRanks, setAvailableRanks] = useState([]);\n\n  const backendUrl = \"http://127.0.0.1:3001\"; // Replace with your API URL\n  const contractAddress = \"0xC1cCeb5adFE832bb5788Db8F10E8b083C037c89b\"; // Replace with your contract address\n  const provider = new ethers.JsonRpcProvider(\"https://rpc2.bahamut.io\"); // Replace with your custom RPC URL\n\n  useEffect(() => {\n    const storedWallet = localStorage.getItem(\"connectedAccount\");\n    if (storedWallet) setWalletAddress(storedWallet);\n  }, []);\n\n  useEffect(() => {\n    const fetchGameData = async () => {\n      setLoading(true);\n      try {\n        // Fetch NFTs\n        const nftResponse = await axios.get(`${backendUrl}/nfts`, {\n          params: { gameType },\n        });\n        const parsedNFTs = nftResponse.data.nfts.map((nft) => ({\n          id: nft.id,\n          metadata: JSON.parse(nft.metadata),\n        }));\n        setNfts(parsedNFTs);\n\n        // Reset rankings and available ranks\n        setRankings({});\n        setAvailableRanks([...Array(parsedNFTs.length).keys()].map((i) => i + 1));\n\n        // Fetch leaderboard\n        const leaderboardResponse = await axios.get(`${backendUrl}/leaderboard`, {\n          params: { gameType },\n        });\n        setLeaderboard(leaderboardResponse.data.leaderboard || []);\n      } catch (err) {\n        console.error(\"Error fetching game data:\", err.message);\n        setError(\"Failed to load game data. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchGameData();\n  }, []);\n\n  const handleAssignRank = (index, rank) => {\n    setRankings((prev) => ({ ...prev, [index]: rank }));\n    setAvailableRanks((prev) => prev.filter((r) => r !== rank));\n  };\n\n  const handleSubmitRanks = async () => {\n    if (!walletAddress) {\n      setError(\"Please connect your wallet first.\");\n      return;\n    }\n\n    if (Object.keys(rankings).length !== nfts.length) {\n      setError(\"Please assign ranks to all NFTs.\");\n      return;\n    }\n\n    const rankedIds = Object.entries(rankings)\n      .sort(([, rankA], [, rankB]) => rankA - rankB)\n      .map(([index]) => nfts[Number(index)].id);\n\n    try {\n      setLoading(true);\n      setError(\"\");\n      const signer = new ethers.BrowserProvider(window.ethereum).getSigner();\n      const contract = new ethers.Contract(contractAddress, ABI, signer);\n\n      const tx = await contract.submit(rankedIds);\n      await tx.wait();\n\n      alert(\"Rankings submitted successfully!\");\n      // Refresh game data after submission\n      setLoading(true);\n      setTimeout(() => {\n        window.location.reload();\n      }, 500);\n    } catch (err) {\n      console.error(\"Error submitting rankings:\", err.message);\n      setError(\"Failed to submit rankings. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"nft-cards-container\">\n      {loading && <LoadingSpinner />}\n      {!loading && (\n        <>\n          <div className=\"cards-wrapper\">\n            {nfts.map((nft, index) => (\n              <div\n                className={`nft-card ${rankings[index] ? \"inactive-card\" : \"\"}`}\n                key={nft.id}\n                style={{\n                  opacity: rankings[index] ? 0.5 : 1,\n                  pointerEvents: rankings[index] ? \"none\" : \"auto\",\n                }}\n              >\n                <h3>{nft.metadata.name || `NFT ${index + 1}`}</h3>\n                <img src={nft.metadata.image} alt={nft.metadata.name || \"NFT\"} />\n                <div className=\"rank-buttons\">\n                  {!rankings[index] &&\n                    availableRanks.map((rank) => (\n                      <button\n                        key={rank}\n                        onClick={() => handleAssignRank(index, rank)}\n                        disabled={\n                          rankings[index] === rank ||\n                          !!Object.values(rankings).includes(rank)\n                        }\n                      >\n                        {`Rank ${rank}`}\n                      </button>\n                    ))}\n                </div>\n                {rankings[index] && <p>Assigned Rank: {rankings[index]}</p>}\n              </div>\n            ))}\n          </div>\n\n          <button onClick={handleSubmitRanks} className=\"submit-ranks-button\">\n            Submit Rankings\n          </button>\n\n          <div className=\"leaderboard-container\">\n            <h2>Leaderboard</h2>\n            <table className=\"leaderboard-table\">\n              <thead>\n                <tr>\n                  <th>Rank</th>\n                  <th>Name</th>\n                  <th>Score</th>\n                </tr>\n              </thead>\n              <tbody>\n                {leaderboard.map((entry, index) => (\n                  <tr key={index}>\n                    <td>{entry.rank}</td>\n                    <td>{entry.name}</td>\n                    <td>{entry.score}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default NFTCards;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}